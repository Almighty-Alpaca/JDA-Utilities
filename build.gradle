/*
 * Copyright 2016 John Grosh (jagrosh).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens

// to build everything:             "gradlew build"
// to build and upload everything:  "gradlew bintrayUpload"

plugins {
    id 'com.jfrog.bintray' version '1.8.0'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

def versionObj = new Version(major: 2, minor: 0)
def jdaVersion = '3.4.0_318'
def date = new Date()

group 'com.jagrosh'
archivesBaseName = project.name

javadoc {
    // exclude internal classes
    exclude('com/jagrosh/jdautilities/commandclient/impl')

    // exclude resources
    exclude('resources')
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.johnrengelman.shadow'

    group "${rootProject.group}.jdautilities"
    version "$versionObj"

    // The baseName of all jars for the project in question
    // If this is the root project, it's just JDA-Utilities
    // If it's a individual module, it will be JDA-Utilities-X
    // where X is the module name
    String projectFullName = project == rootProject? rootProject.name : "$rootProject.name-${toCamelCase(project.name)}"
    archivesBaseName = projectFullName

    repositories {
        jcenter()
        maven { url 'https://mvnrepository.com/artifact/' }
    }

    dependencies {
        compileOnly "net.dv8tion:JDA:$jdaVersion"
        testCompile 'junit:junit:4.12'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
        test {
            compileClasspath = main.compileClasspath
            runtimeClasspath = main.runtimeClasspath
        }
    }

    task sourcesForRelease(type: Copy) {
        group 'publishing'
        description 'Organizes sources for a bintray release'

        from 'src/main/java'
        into "${buildDir}/filteredSrc"

        filteringCharset 'UTF-8'

        filter(ReplaceTokens, tokens: [
                versionMajor: versionObj.major.toString(),
                versionMinor: versionObj.minor.toString()
        ])
    }

    compileJava {
        source = sourcesForRelease.destinationDir
        classpath = sourceSets.main.compileClasspath
        options.encoding = 'UTF-8'

        dependsOn sourcesForRelease
    }

    jar {
        baseName projectFullName
        manifest {
            attributes 'Implementation-Version': version
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        group 'build'
        description 'Creates a Sources Jar'

        baseName projectFullName
        classifier 'sources'
        from "${buildDir}/filteredSrc"
    }

    javadoc {
        failOnError = false

        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.author()
        options.encoding = 'UTF-8'

        // Allow @implNote tag
        options.addStringOption('tag', "implNote:a:Implementation Note:")
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        group 'documentation'
        description 'Creates a Javadoc Jar'

        baseName projectFullName
        classifier 'javadoc'

        from javadoc.destinationDir
    }

    shadowJar {
        baseName projectFullName
        classifier 'withDependencies'
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                from components.java
                groupId group
                artifactId archivesBaseName
                version version
                artifact javadocJar
                artifact sourcesJar
            }
        }
    }

    bintray {
        user = bintrayUsername
        key = bintrayApiKey
        publications = ["BintrayRelease"]
        publish = true

        pkg {
            repo = 'maven'
            name = 'JDA-Utilities'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/JDA-Applications/JDA-Utilities'
            version {
                name = project.version
                released = date
            }
        }
    }

    bintrayUpload {
        dependsOn build

        onlyIf { !propertyOf("bintrayUsername").empty }
        onlyIf { !propertyOf("bintrayApiKey").empty }
    }

    clean {
        doLast {
            // Clean Intellij /out/ directory
            delete { files('/out') }
        }
    }

    build {
        dependsOn javadocJar
        dependsOn sourcesJar
        dependsOn shadowJar
    }
}

class Version {
    String major, minor

    String toString() {
        "${major}.${minor}"
    }
}

static String toCamelCase(String str) {
    if(str.length() < 2)
        return str.toUpperCase()

    return "${str[0].toUpperCase()}${str.substring(1)}"
}

String propertyOf(String key) {
    return !hasProperty(key)? "" : (properties["bintrayApiKey"] as String)
}
